<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using HarmonyLib;
using Kingmaker.Blueprints.JsonSystem;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using UnityModManagerNet;
using static UnityModManagerNet.UnityModManager.ModEntry;

namespace <#= Common.DefaultNamespace #>
{

    public interface IModlet
    {
        void PatchBlueprints();
    }

    public interface ILibraryAdapter
    {
        void Load(UnityModManager.ModEntry modEntry);
    }

    public static class Main
    {
        private static ModLogger Logger;
        private static Harmony HarmonyInstance;
        public static List<IModlet> Modlets = new();
        public static List<ILibraryAdapter> Libraries = new();

        /// <summary>
        /// Unity Mod Manager entry point. Called to load the mod.
        /// </summary>
        static bool Load(UnityModManager.ModEntry modEntry)
        {
            Logger = modEntry.Logger;
            try
            {
                HarmonyInstance = new Harmony(modEntry.Info.Id);
                HarmonyInstance.PatchAll();
                Log("Finished harmony patching.");

                foreach (var libType in Assembly.GetExecutingAssembly().GetTypes().Where(t => t.IsClass && typeof(ILibraryAdapter).IsAssignableFrom(t)))
                {
                    ILibraryAdapter lib = (ILibraryAdapter)Activator.CreateInstance(libType);
                    try
                    {
                        lib.Load(modEntry);
                        Libraries.Add(lib);
                    }
                    catch (Exception e)
                    {
                        Main.Error(e);
                    }
                }

                foreach (var modletType in Assembly.GetExecutingAssembly().GetTypes().Where(t => t.IsClass && typeof(IModlet).IsAssignableFrom(t)))
                {
                    IModlet modlet = (IModlet)Activator.CreateInstance(modletType);
                    try
                    {
                        Modlets.Add(modlet);
                    }
                    catch (Exception e)
                    {
                        Main.Error(e);
                    }
                }
            }
            catch (Exception e)
            {
                Error(e);
                return false; // Flags the init failure for UMM
            }
            return true;
        }

        public static void Log(string message)
        {
            Logger.Log(message);
        }

        public static void Error(Exception ex)
        {
            Logger.Error(ex.Message);
        }
    }

    /// <summary>
    /// Patch for BlueprintsCache.Init(). This is when it is safe to add / modify blueprints.
    /// </summary>
    [HarmonyPatch(typeof(BlueprintsCache))]
    static class BlueprintsCache_Patch
    {
        [HarmonyPatch(nameof(BlueprintsCache.Init)), HarmonyPostfix]
        static void Init()
        {
            try
            {
                Main.Log("Initializing blueprints.");

                // Call your configure/init methods for new content (blueprints) here
                foreach (IModlet modlet in Main.Modlets)
                {
                    modlet.PatchBlueprints();
                }

                Main.Log("Initialization finished.");
            }
            catch (Exception e)
            {
                Main.Error(e);
            }
        }
    }

}

